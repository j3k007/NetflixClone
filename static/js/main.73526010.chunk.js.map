{"version":3,"sources":["components/Nav/Nav.js","axios.js","Requests.js","components/Banner/Banner.js","components/Row/Row.js","components/HomeScreen/HomeScreen.js","firebase.js","components/SignupScreen/SignupScreen.js","components/LoginScreen/LoginScreen.js","features/userSlice.js","components/PlansScreen/PlansScreen.js","components/ProfileScreen/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","_useState","useState","_useState2","_slicedToArray","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","_jsx","className","concat","children","_jsxs","onClick","push","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentries","Banner","string","n","movie","setMovie","_useState3","_useState4","trailerUrl","setTrailerUrl","style","backgroundColor","_fetchData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","wrap","_context","prev","next","get","sent","data","results","Math","floor","random","length","abrupt","stop","apply","arguments","fetchData","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","title","name","original_name","movieName","orginal_name","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","err","console","log","overview","substr","YouTube","videoId","opts","height","width","playerVars","autoplay","Row","_ref","fetchUrl","_ref$isLargeRow","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","Navbar","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","SignupScreen","emailRef","useRef","passwordRef","ref","placeholder","type","tyoe","e","preventDefault","signInWithEmailAndPassword","current","value","authUser","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","_Fragment","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","_userSlice$actions","actions","selectUser","PlansScreen","description","products","Object","entries","_ref2","productId","productData","ProfileScreen","useSelector","plan","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","BrowserRouter","Switch","Route","path","exact","Login","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","React","StrictMode","Provider","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.73526010.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './Nav.css';\nfunction Nav(){\n    const [show,handleShow]=useState(false);\n    const history=useHistory();\n    const transitionNavBar= () => {\n        if(window.scrollY >100){\n            handleShow(true);\n        }\n        else{\n            handleShow(false);\n        }\n    }\n\n    useEffect(()=> {\n        window.addEventListener(\"scroll\",transitionNavBar);\n        return ()=>window.removeEventListener('scroll',transitionNavBar);\n    },[]);\n    return (\n        <div className={`nav ${show && \"nav_black\"}`}>\n            <div className=\"nav_contents\">\n                <img className=\"nav_logo\" \n                    onClick={()=> history.push(\"/\")}\n                    src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n                    alt=\"\" />\n                <img\n                    onClick={() => {history.push(\"/profile\")}}\n                    className=\"nav_avatar\" \n                    src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" \n                    alt=\" \"/>     \n            </div>\n            \n            \n        </div>\n    );\n}\n\nexport default Nav;","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\"\n})\n\nexport default instance;","const API_KEY = \"2eae892f046eedf191cbadb3dae165cb\";\n\nconst requests= {\n    fetchTrending:`/trending/a;;/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentries:`/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;","import React, { useEffect, useState } from 'react';\nimport './Banner.css';\nimport axios from \"../../axios\";\nimport requests from \"../../Requests\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from 'movie-trailer';\nimport { findNonSerializableValue } from '@reduxjs/toolkit';\nfunction Banner(){\n    const [movie,setMovie] =useState([]);\n    const [trailerUrl,setTrailerUrl]=useState('');\n\n    const style={backgroundColor:trailerUrl!='' && `rgba(0,0,0,0.4)`}\n    useEffect(()=>{\n        async function fetchData(){\n            const request= await axios.get(requests.fetchTrending);\n            setMovie(\n                request.data.results[\n                    Math.floor(Math.random()* request.data.results.length-1)\n                ]\n            );\n            return request;\n        }\n        fetchData();\n    },[]);\n   \n    function truncate(string, n){\n        return string?.length > n ? string.substr(0,n-1) + '...':string;\n    }\n\n    const opts ={\n        height:\"390\",\n        width:\"50%\",\n        playerVars:{\n            autoplay:1,\n        },\n    };\n\n    const handleClick =(movieName) =>{\n        if(trailerUrl){\n            setTrailerUrl('');\n        }else{\n            movieTrailer(movieName)\n            .then((url) => {\n                const urlParams=new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get(\"v\"));\n            })\n            .catch((err) => console.log(err));\n        }\n    }\n    return (\n        <header \n            className=\"banner\" \n            style={{\n                backgroundSize:\"cover\",\n                backgroundPosition:\"center center\" ,\n                backgroundImage:`url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n              \n                            \n        }}>\n         \n        <div style={style}\n            className=\"banner_contents\">\n                <h1 className=\"banner_title\"> \n                    {movie?.title || movie?.name || movie?.original_name}</h1>\n                <div className=\"banner_buttons\">\n                    <button onClick={()=>handleClick(movie.name || movie.title || movie.orginal_name)} className=\"banner_button\">Play</button>\n                    <button className=\"banner_button\">My List</button>\n                </div>\n                <h1 className=\"banner_description\">\n                    {truncate(movie?.overview,150)}\n                    \n                </h1>\n            </div>\n            \n        {trailerUrl  !=\"\" && <YouTube className=\"banner_video\" videoId={trailerUrl} opts={opts} />}\n         \n          \n          <div className=\"banner--fadeBottom\"/>\n          \n        </header>\n    );\n}\n\nexport default Banner;","import axios from \"../../axios\";\nimport React, { useEffect, useState } from 'react'\nimport './Row.css';\nimport YouTube from \"react-youtube\";\nimport movieTrailer from 'movie-trailer';\nfunction Row({title, fetchUrl, isLargeRow=false}) {\n    const [movies,setMovies] = useState([]);\n    const [trailerUrl,setTrailerUrl]=useState('');\n    const base_url= \"https://image.tmdb.org/t/p/original/\";\n    useEffect(()=> {\n        async function fetchData() {\n            const request=await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n\n        fetchData();\n    },[fetchUrl]);\n\n    const opts ={\n        height:\"390\",\n        width:\"50%\",\n        playerVars:{\n            autoplay:1,\n        },\n    };\n\n    const handleClick =(movieName) =>{\n        if(trailerUrl !=''){\n            setTrailerUrl('');\n        }else{\n            movieTrailer(movieName)\n            .then((url) => {\n                const urlParams=new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get(\"v\"));\n            })\n            .catch((err) => console.log(err));\n        }\n    }\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row_posters\">\n                {movies.map((movie) =>\n                    \n                    ((isLargeRow && movie.poster_path)|| (!isLargeRow && movie.backdrop_path)) &&(    \n                        <img \n                            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`} \n                            onClick={()=> handleClick(movie.name || movie.title || movie.orginal_name)}\n                            key={movie.id}\n                            src={`${base_url}${\n                            isLargeRow? movie.poster_path : movie.backdrop_path\n                            }`} \n                            alt={movie.name} \n                        />\n                ))\n                    \n                }\n            </div>\n            {trailerUrl !='' && <YouTube \n                                    videoId={trailerUrl} \n                                    opts={opts} \n                                    />}\n         </div>\n    )\n}\n\nexport default Row;\n","import React from 'react';\nimport './HomeScreen.css';\nimport Navbar from '../Nav/Nav';\nimport Banner from '../Banner/Banner';\nimport Row from '../Row/Row';\nimport requests from \"../../Requests\";\nfunction HomeScreen(){\n    return(\n        <div className=\"homeScreen\">\n            <Navbar />\n            <Banner />\n            <Row  title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow=\"true\" />\n            <Row  title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n            <Row  title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n            <Row  title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n            <Row  title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n            <Row  title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n            <Row  title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n            <Row  title=\"Documentries\" fetchUrl={requests.fetchDocumentries}/>\n        </div>\n    );\n}\n\nexport default HomeScreen; ","import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyA_eBAfnnPaIIRKzUjUoN-176ecSDiMyH4\",\n    authDomain: \"netflix-clone-96032.firebaseapp.com\",\n    projectId: \"netflix-clone-96032\",\n    storageBucket: \"netflix-clone-96032.appspot.com\",\n    messagingSenderId: \"529309830265\",\n    appId: \"1:529309830265:web:7adf915c11221a640498a8\"\n  }; \n\n  const firebaseApp=firebase.initializeApp(firebaseConfig);\n  const db=firebaseApp.firestore();\n  const auth=firebase.auth();\n\n  export {auth};\n\n  export default db;","import React, { useRef } from 'react';\nimport { auth } from '../../firebase';\nimport './SignupScreen.css';\nfunction SignupScreen() {\n    const emailRef=useRef(null);\n    const passwordRef=useRef(null);\n    const register =(e) => {\n        e.preventDefault();\n\n        auth.createUserWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        ).then((authUser)=> {\n            //console.log(authUser);\n        }).catch((error) => {\n            alert(error.message);\n        });\n    };\n\n    const signIn=(e) =>{\n        e.preventDefault();\n        auth.signInWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        ).then((authUser)=> {\n            // console.log(authUser);\n        }).catch((error) => {\n            alert(error.message);\n        });\n    }\n    return (\n        <div className=\"signupScreen\">\n            <form>\n                <h1>Sign In</h1>\n                <input ref={emailRef} placeholder=\"Email\" type=\"email\"/>\n                <input ref={passwordRef} placeholder=\"Password\" type=\"password\"/>\n                <button tyoe=\"submit\" onClick={signIn}>Sign In</button>\n\n                <h4>\n                    <span className=\"signupScreen_grey\">New to Netflix? </span>\n                    <span className=\"signupScreen_link\" onClick={register}>Sign Up now.</span>\n                </h4>\n            </form>\n        </div>\n    )\n}\n\nexport default SignupScreen;\n","import React, { useState } from 'react';\nimport './LoginScreen.css';\nimport SignupScreen from '../SignupScreen/SignupScreen';\nfunction LoginScreen() {\n    const [signIn,setSignIn]=useState(false);\n    return (\n        <div className=\"loginScreen\">\n            <div className=\"loginScreen_background\">\n                <img \n                    className=\"loginScreen_logo\"\n                    src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n                    alt=\"\"\n                    />\n                <button\n                     onClick={()=>setSignIn(true)} \n                    className=\"loginScreen_button\">Sign In</button>\n                <div className=\"loginScreen_gradient\"/>    \n            </div>\n            <div className=\"loginScreen_body\">\n                {signIn ? (\n                    <SignupScreen />\n                ):(\n                    <>\n                        <h1>Unlimited films, TV programmer and more.</h1>\n                        <h2>Watch anywhere. Cancel at any time</h2>\n                        <h3>Ready to watch? Enter your email \n                            to create or restart your membership.</h3>\n                        <div className=\"loginScreen_input\">\n                            <form>\n                                <input type=\"email\" placeholder=\"Email Address\" />\n                                <button onClick={()=>{setSignIn(true)}}\n                                        className=\"loginScreen_getStarted\">GET STARTED</button>\n                            </form>\n                        </div>    \n                    </>\n                )}\n                \n            </div>\n        </div>\n    );\n}\n\nexport default LoginScreen;\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login:(state,action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout:(state) => {\r\n      state.user=null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useEffect, useState } from 'react';\nimport './PlansScreen.css';\nimport db from \"../../firebase\";\nfunction PlansScreen() {\n    const plans=[\n        {name:\"Netflic Standard\",description:\"1080p\",current:false },\n        {name:\"Netflic Basic\",description:\"480p\",current:false },\n        {name:\"Netflic Premium\",description:\"4k+HDR\",current:true }\n    ]\n    const [products,setProducts] =useState(plans);\n\n    // useEffect(()=> {\n    //     db.collections(\"products\").where(\"active\", \"==\",true)\n    //     .get().then((querySnapshot) => {\n    //         const products={};\n    //         querySnapshot.forEach(async productDoc => {\n    //             products[productDoc.id]=productDoc.data();\n    //             const priceSnap =await productDoc.ref.collection(\"prices\").get();\n    //             priceSnap.docs.forEach(price => {\n    //                 products[productDoc.id].prices = {\n    //                     priceId: price.id,\n    //                     priceData:price.data()\n    //                 }\n    //             })\n    //         })\n    //     });\n    //     setProducts(products);\n    // },[]);\n\n    // const loadCheckout= async (priceId) => {\n    //     const docRef=await db.collection(\"customers\").doc(user.uid).collection(\"checkout_sessions\")\n    //     .add({\n    //         price:priceId,\n    //         success_url:window.location.origin,\n    //         cancel_url:window.location.origin,\n    //     });\n\n    //     docRef.onSnapshot(async(snap) => {\n    //         const {error, sessionId} = snap.data();\n    //         if(error){\n    //             alert(`An error occured ${error.message}`);\n    //         }\n\n    //         if(sessionID){\n    //             const stripe = \n    //         }\n    //     })\n    // };\n    return (\n        <div className=\"plansScreen\">\n          {Object.entries(products).map(([productId, productData]) => {\n              //code\n              return (\n                  <div className=\"planScreen_plan\" key={productId}>\n                      <div className=\"planScreen_info\">\n                          <h5>{productData.name}</h5>\n                          <h6>{productData.description}</h6>\n                      </div>\n                      <button \n                        // onClick={() =>{loadCheckout(productData.prices.priceId)}}\n                        style={{\"backgroundColor\": productData.current?\"grey\":null}}\n                        >{productData.current?\"Current Package\":\"Subscribe\"}</button>\n                  </div>\n              );\n          })}\n        </div>\n    )\n}\n\nexport default PlansScreen;\n","import React, { useEffect, useState } from 'react';\nimport './ProfileScreen.css';\nimport Nav from '../Nav/Nav';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from '../../features/userSlice';\nimport {auth} from '../../firebase';\nimport PlansScreen from '../PlansScreen/PlansScreen';\nfunction ProfileScreen() {\n    const user=useSelector(selectUser);\n    const [plan,setPlan]=useState(\"Premium\");\n    return (\n        <div className=\"profileScreen\">\n            <Nav />\n            <div className=\"profileScreen_body\">\n                <h1>Edit Profile</h1>\n                <div className=\"profileScreen_info\">\n                    <img \n                        src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n                        alt=\"\" />\n                    <div className=\"profileScreen_details\">\n                        <h2>{user.email}</h2>\n                        <div className=\"profileScreen_plans\">\n                            <h3>Plans (Current Plan: {plan})</h3>\n                            <h4>Renewal date: </h4>\n                            <PlansScreen />\n                            <button\n                                onClick={()=> auth.signOut()} \n                                className=\"profileScreen_signOut\">Sign Out</button>\n                        </div>\n                    </div>    \n                </div>                \n            </div>\n        </div>\n    )\n}\n\nexport default ProfileScreen;\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport HomeScreen from './components/HomeScreen/HomeScreen';\r\nimport Login from './components/LoginScreen/LoginScreen';\r\nimport {BrowserRouter , Switch ,Route , Link} from 'react-router-dom';\r\nimport { auth } from './firebase';\r\nimport { login, logout, selectUser } from './features/userSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ProfileScreen from './components/ProfileScreen/ProfileScreen';\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n  useEffect(()=>{\r\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n      if(userAuth){\r\n        dispatch(login({\r\n          uid:userAuth.uid,\r\n          email:userAuth.email,\r\n        }));\r\n      }else{\r\n        dispatch(logout());\r\n      }\r\n    });\r\n\r\n    return unsubscribe;\r\n  },[dispatch]);\r\n  return (\r\n    <div className=\"app\">\r\n      <BrowserRouter>\r\n        { !user ? \r\n          (\r\n            <Login />\r\n          )  :  (\r\n            <Switch>\r\n              <Route path=\"/profile\">\r\n                <ProfileScreen />\r\n              </Route>\r\n              <Route exact path=\"/\">\r\n                <HomeScreen />\r\n              </Route>\r\n            </Switch>\r\n          ) \r\n\r\n        }\r\n        \r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}